import java.util.Scanner;

class MyTime {
	private int second; // valid range is [0, 59]
	private int minute; // valid range is [0, 59]
	private int hour; // valid range is [0, 23]
	private int ex;

	/** Sets the hour to the given value with input validation */
	public void setHour(int hour) {
		if (hour >= 0 && hour <= 23) {
			this.hour = hour;
		} else {
			this.hour = 00;
			this.ex = 1;

			try {
				throw new IllegalArgumentException("Invalid hour");
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
	}

	/** Sets the minute to the given value with input validation */
	public void setMinute(int minute) {
		if (minute >= 0 && minute <= 59 && ex != 1) {
			this.minute = minute;
		} else if (minute >= 0 && minute <= 59 && ex == 1) {
			this.minute = 00;
		} else {
			this.ex = 1;
			try {
				throw new IllegalArgumentException("Invalid minute");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/** Sets the second to the given value with input validation */
	public void setSecond(int second) {
		if (second >= 0 && second <= 59 && ex != 1) {
			this.second = second;
		} else if (second >= 0 && second <= 59 && ex == 1) {
			this.second = 00;
		} else {
			try {
				throw new IllegalArgumentException("Invalid second");
			} catch (Exception e) {
				System.out.println("java.lang.IllegalArgumentException: Invalid Second");
				e.printStackTrace();
			}
		}
	}

	/** Sets second, minute and hour to the given values with input validation */
	public void setTime(int hour, int minute, int second) {
		// Invoke setters to do input validation
		this.setHour(hour);
		this.setMinute(minute);
		this.setSecond(second);
	}

	/** Constructs a Time instance with the given values with input validation */
	public MyTime(int second, int minute, int hour) {
		// Invoke setters to do input validation
		this.setTime(second, minute, hour);
	}

	/** Constructs a Time instance with default values */
	public MyTime() { // The default constructor
		this.second = 0;
		this.minute = 0;
		this.hour = 0;
	}

	// The public getters
	/** Returns the second */
	public int getSecond() {
		return this.second;
	}

	/** Returns the minute */
	public int getMinute() {
		return this.minute;
	}

	/** Returns the hour */
	public int getHour() {
		return this.hour;
	}

	/**
	 * Returns a self-descriptive string in the form of "hh:mm:ss" with leading
	 * zeros
	 */
	public String toString() {
		return String.format("%02d:%02d:%02d", hour, minute, second);
	}

	/**
	 * Advances this Time instance by one second and returns this instance to
	 * support chaining
	 */
	public MyTime nextSecond() {
		++second;
		if (second == 60) { // We are sure that second <= 60 here because of the input validation
			second = 0;
			++minute;
			if (minute == 60) {
				minute = 0;
				++hour;
				if (hour == 24) {
					hour = 0;
				}
			}
		}
		return this; // Return this instance, to support chaining
	}

	public MyTime nextMinute() {
		++minute;
		if (minute == 60) {
			minute = 0;
			++hour;
			if (hour == 24) {
				hour = 0;
			}
		}

		return this; // Return this instance, to support chaining
	}

	public MyTime nextHour() {

		++hour;
		if (hour == 24) {
			hour = 0;
		}

		return this; // Return this instance, to support chaining
	}

	public MyTime previousSecond() {
		--second;
		if (second < 0) {
			second = 59;
			--minute;
		}

		return this; // Return this instance, to support chaining
	}

	public MyTime previousMinute() {
		--minute;
		if (minute < 0) {
			minute = 59;
			--hour;
		}
		return this; // Return this instance, to support chaining
	}

	public MyTime previousHour() {
		--hour;
		if (hour < 0) {
			hour = 23;
		}
		return this; // Return this instance, to support chaining
	}
	
}

public class MyTimeTest {

	public static void main(String[] args) {
		/* Do NOT Alter main() */
		Scanner in = new Scanner(System.in);
		MyTime time = new MyTime(in.nextInt(), in.nextInt(), in.nextInt());
		System.out.println(time);
		System.out.println(time.nextHour());
		System.out.println(time.nextMinute());
		System.out.println(time.nextSecond());
		System.out.println(time.previousHour());
		System.out.println(time.previousMinute());
		System.out.println(time.previousSecond());

	}
}
